/*‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° 6 ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤ C++ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà 14 ‡∏ñ‡∏∂‡∏á‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà 24

---

### 1Ô∏è‚É£ **‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (Array & Loop)**
**üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** Arrays, Loops, Functions

```cpp
#include <iostream>
using namespace std;

void calculateExpenses(double expenses[], int size) {
    double total = 0;
    for (int i = 0; i < size; i++) {
        total += expenses[i];
    }
    cout << "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: " << total << " ‡∏ö‡∏≤‡∏ó\n";
    cout << "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô: " << total / size << " ‡∏ö‡∏≤‡∏ó\n";
}

int main() {
    int n;
    cout << "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô: ";
    cin >> n;
    double expenses[n];

    for (int i = 0; i < n; i++) {
        cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà " << i + 1 << ": ";
        cin >> expenses[i];
    }

    calculateExpenses(expenses, n);
    return 0;
}
```

---

### 2Ô∏è‚É£ **‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà-‡∏Ñ‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (Functions & Conditionals)**
**üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** Functions, Conditional Statements

```cpp
#include <iostream>
using namespace std;

bool isEven(int num) {
    return num % 2 == 0;
}

int main() {
    int number;
    cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: ";
    cin >> number;

    if (isEven(number)) {
        cout << number << " ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà\n";
    } else {
        cout << number << " ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà\n";
    }

    return 0;
}
```

---

### 3Ô∏è‚É£ **‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏ö‡∏ô‡∏±‡∏™ (Structures & Loops)**
**üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** Struct, Loops, Conditionals

```cpp
#include <iostream>
using namespace std;

struct Employee {
    string name;
    double salary;
    double bonus;
};

int main() {
    int n;
    cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ";
    cin >> n;
    Employee employees[n];

    for (int i = 0; i < n; i++) {
        cout << "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà " << i + 1 << ": ";
        cin >> employees[i].name;
        cout << "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ";
        cin >> employees[i].salary;
        employees[i].bonus = employees[i].salary * 0.1;  // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ 10%
    }

    cout << "\n=== ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ===\n";
    for (int i = 0; i < n; i++) {
        cout << "‡∏ä‡∏∑‡πà‡∏≠: " << employees[i].name
             << " | ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: " << employees[i].salary
             << " | ‡πÇ‡∏ö‡∏ô‡∏±‡∏™: " << employees[i].bonus << "\n";
    }

    return 0;
}
```

---

### 4Ô∏è‚É£ **‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (Vectors & Menu Selection)**
**üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** Vectors, Loops, Switch Case

```cpp
#include <iostream>
#include <vector>
using namespace std;

struct Product {
    string name;
    double price;
};

int main() {
    vector<Product> inventory;
    int choice;
    
    do {
        cout << "\n1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n2. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n3. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ";
        cin >> choice;
        
        if (choice == 1) {
            Product p;
            cout << "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ";
            cin >> p.name;
            cout << "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ";
            cin >> p.price;
            inventory.push_back(p);
        } else if (choice == 2) {
            cout << "\n=== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ===\n";
            for (size_t i = 0; i < inventory.size(); i++) {
                cout << i + 1 << ". " << inventory[i].name << " - " << inventory[i].price << " ‡∏ö‡∏≤‡∏ó\n";
            }
        }
        
    } while (choice != 3);

    return 0;
}
```

---

### 5Ô∏è‚É£ **‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡πà‡∏≤‡∏ô-‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (File Handling)**
**üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** File I/O

```cpp
#include <iostream>
#include <fstream>
using namespace std;

struct Student {
    string name;
    int score;
};

int main() {
    ofstream file("students.txt");  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
    if (!file) {
        cout << "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ\n";
        return 1;
    }

    int n;
    cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ";
    cin >> n;
    Student students[n];

    for (int i = 0; i < n; i++) {
        cout << "‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ";
        cin >> students[i].name;
        cout << "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ";
        cin >> students[i].score;
        file << students[i].name << " " << students[i].score << "\n";
    }
    file.close();

    cout << "\n‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå:\n";
    ifstream inputFile("students.txt");
    string name;
    int score;
    while (inputFile >> name >> score) {
        cout << "‡∏ä‡∏∑‡πà‡∏≠: " << name << " | ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: " << score << "\n";
    }
    inputFile.close();

    return 0;
}
```

---

### 6Ô∏è‚É£ **‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏•‡∏¥‡∏™‡∏ï‡πå (Linked List)**
**üìå ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** Linked List, Dynamic Memory

```cpp
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void insert(Node*& head, int value) {
    Node* newNode = new Node;
    newNode->data = value;
    newNode->next = head;
    head = newNode;
}

void display(Node* head) {
    while (head != nullptr) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << "NULL\n";
}

int main() {
    Node* head = nullptr;
    insert(head, 10);
    insert(head, 20);
    insert(head, 30);
    
    cout << "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Linked List:\n";
    display(head);

    return 0;
}
```

---

### üî• **‡∏™‡∏£‡∏∏‡∏õ**
‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á 6 ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà 14 ‡∏ñ‡∏∂‡∏á 24 ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà
‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ **Arrays & Loops**  
‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ **Functions & Conditional Statements**  
‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ **Structures & Loops**  
‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ **Vectors & Menu Selection**  
‚úÖ ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô-‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô **File Handling**  
‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á **Linked List (Dynamic Memory)**  

‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô **VS Code** ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö **g++ compiler** üöÄ*/