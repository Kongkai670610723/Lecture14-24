/*### ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡πÑ‡∏•‡∏î‡πå **CPE102_22_20250221** (Lecture 22: Classes III - Operator Overloading)

#### **1. Operator Overloading ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£**
- ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ **operator** ‡∏Å‡∏±‡∏ö object ‡πÄ‡∏ä‡πà‡∏ô:
  - `object2 = object1.add(object2);` (‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô)
  - `object2 = object1 + object2;` (‡πÉ‡∏ä‡πâ operator)
- ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á operator ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢:
  - `<<` : Stream insertion, Bitwise left-shift
  - `+`  : ‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠ object ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
  - `&`  : ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á object ‡∏´‡∏£‡∏∑‡∏≠ Bitwise AND

---

#### **2. ‡∏Å‡∏≤‡∏£ Overload Operator**
- ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô class ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á operator
- ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ `operator` ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå ‡πÄ‡∏ä‡πà‡∏ô `operator+`
- ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ operator ‡∏Å‡∏±‡∏ö user-defined types ‡πÑ‡∏î‡πâ
- **‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á operator ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ**

---

#### **3. Operator ‡∏ó‡∏µ‡πà Overload ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ**
- **Overload ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ** ‡πÄ‡∏ä‡πà‡∏ô:
  - `.`, `.*`, `::`, `?:`, `sizeof`
- **Overload ‡πÑ‡∏î‡πâ** ‡πÄ‡∏ä‡πà‡∏ô:
  - `+`, `-`, `*`, `/`, `%`, `&`, `|`, `~`, `!`, `=`, `==`, `!=`, `<=`, `>=`, `&&`, `||`, `++`, `--`, `->`, `()`, `new`, `delete`, `<<`, `>>`

---

#### **4. ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Operator Overloading**
- **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á built-in data types ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ** (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á `int + int`)
- **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö precedence ‡∏Ç‡∏≠‡∏á operator ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ** (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ `()` ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏≠‡∏á)
- **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô associativity ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ** (‡πÄ‡∏ä‡πà‡∏ô `*` ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
- **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô operand ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ** (‡πÄ‡∏ä‡πà‡∏ô `&` ‡πÄ‡∏õ‡πá‡∏ô unary operator ‡πÄ‡∏™‡∏°‡∏≠)
- **‡∏ï‡πâ‡∏≠‡∏á Overload ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß** (`+` ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Overload `+=` ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)

---

#### **5. ‡∏Å‡∏≤‡∏£ Overload Operator ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ**
##### **5.1 Overloading ‡∏î‡πâ‡∏ß‡∏¢ Member Function**
- ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á **private data members** ‡πÑ‡∏î‡πâ
- `operator+` ‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà **right operand** ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå

```cpp
class Circle {
public:
    Circle operator+(const Circle& c) {
        Circle temp;
        temp.radius = this->radius + c.radius;
        return temp;
    }
};
```

---

##### **5.2 Overloading ‡∏î‡πâ‡∏ß‡∏¢ Non-Member Function**
- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô class (‡πÅ‡∏ï‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á **public data members** ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)

```cpp
Circle operator+(const Circle& c1, const Circle& c2) {
    Circle temp;
    temp.radius = c1.radius + c2.radius;
    return temp;
}
```

---

##### **5.3 Overloading ‡∏î‡πâ‡∏ß‡∏¢ Friend Function**
- ‡πÉ‡∏ä‡πâ `friend` ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á **private data members** ‡πÑ‡∏î‡πâ
- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö operator ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô object

```cpp
class Circle {
    friend Circle operator+(const Circle& c1, const Circle& c2);
};
```

---

#### **6. Overload Unary Operator (`++` ‡πÅ‡∏•‡∏∞ `--`)**
- **Prefix (`++A`)** : ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤
- **Postfix (`A++`)** : ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

```cpp
Circle& operator++() {   // Prefix
    ++radius;
    return *this;
}

Circle operator++(int) { // Postfix
    Circle temp = *this;
    ++radius;
    return temp;
}
```

---

#### **7. Overloading `<<` ‡πÅ‡∏•‡∏∞ `>>`**
- ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö **cin ‡πÅ‡∏•‡∏∞ cout**
- ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô **friend function** ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ `cout` ‡πÅ‡∏•‡∏∞ `cin` ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á class

```cpp
ostream& operator<<(ostream& out, const Circle& c) {
    out << "Radius: " << c.radius;
    return out;
}
```

---

#### **8. Commutative Operator**
- ‡∏ó‡∏≥‡πÉ‡∏´‡πâ `a + b` ‡πÅ‡∏•‡∏∞ `b + a` ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
- ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ `Long int + MyClass` ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ **non-member function**
  
```cpp
Circle operator+(double num, const Circle& c) {
    Circle temp;
    temp.radius = num + c.radius;
    return temp;
}
```

---

#### **9. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏Å‡∏≤‡∏£ Overload Operator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Complex Number**
- Overload `+`, `-`, ‡πÅ‡∏•‡∏∞ `<<`
- ‡πÉ‡∏ä‡πâ **constructor** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ
- **Error Handling**: ‡∏ñ‡πâ‡∏≤ `double + ComplexNumber` ‡πÑ‡∏°‡πà‡∏°‡∏µ operator ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î error

```cpp
class ComplexNumber {
    double real, imag;
public:
    ComplexNumber(double r = 0, double i = 0) : real(r), imag(i) {}

    ComplexNumber operator+(const ComplexNumber& c) {
        return ComplexNumber(real + c.real, imag + c.imag);
    }

    friend ostream& operator<<(ostream& out, const ComplexNumber& c);
};

ostream& operator<<(ostream& out, const ComplexNumber& c) {
    out << c.real << "+" << c.imag << "*i";
    return out;
}
```

---

### **‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÜ**
1. **Operator Overloading** ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô `a + b` ‡πÅ‡∏ó‡∏ô `a.add(b)`.
2. ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `operator+` ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô **class** ‡πÄ‡∏û‡∏∑‡πà‡∏≠ overload.
3. **Member function** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö operator ‡∏ó‡∏µ‡πà‡∏°‡∏µ left operand ‡πÄ‡∏õ‡πá‡∏ô object ‡∏Ç‡∏≠‡∏á class ‡∏ô‡∏±‡πâ‡∏ô.
4. **Non-member function** ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö operator ‡∏ó‡∏µ‡πà left operand ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô.
5. **Friend function** ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á private data members.
6. Overload `<<` ‡πÅ‡∏•‡∏∞ `>>` ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô **non-member function**.
7. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô precedence ‡∏´‡∏£‡∏∑‡∏≠ associativity ‡∏Ç‡∏≠‡∏á operator ‡πÑ‡∏î‡πâ.
8. ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ **commutative operation** ‡∏ï‡πâ‡∏≠‡∏á overload function ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö.

---

### **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**
```cpp
ComplexNumber c1(1, 2), c2(3, 4);
ComplexNumber c3 = c1 + c2; 
cout << c3; // Output: 4+6*i
```

---

### **‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á Operator Overloading**
‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î **‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô**  
‚úÖ ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡∏ß‡πÜ (`a.add(b)` -> `a + b`)  
‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö `cout`, `cin`, ‡πÅ‡∏•‡∏∞ arithmetic operators ‡πÑ‡∏î‡πâ  
‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö user-defined types  

---

### **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á**
‚ö†Ô∏è ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡∏≥‡πÉ‡∏´‡πâ operator ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô (‡πÄ‡∏ä‡πà‡∏ô `+` ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏•‡∏ö)  
‚ö†Ô∏è Overload ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ operator ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô  
‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ operator ‡∏ó‡∏µ‡πà overload **‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ**  

---

### **‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ** üéØ  
‚úÖ **‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢**  
‚úÖ **‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°**  
‚úÖ **‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô***/